name: CI/CD Pipeline (main)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env: 
      MONGO_URI: ${{ secrets.MONGO_URI }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Run tests for all services
        run: |
          for dir in ./services/* ./frontend; do
            echo "Running tests in $dir"
            cd $dir
            npm install
            npm test || exit 1
            cd -
          done

  push-images:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCLOUD_AUTH_JSON }}

      - name: Configure Docker to use Google Container Registry
        run: |
          gcloud auth configure-docker

      - name: Build and Push Updated Docker Images
        run: |
          CHANGED_DIRS=$(git diff --name-only HEAD~1 HEAD | cut -d'/' -f2 | sort | uniq)
          for dir in $CHANGED_DIRS; do
            if [ "$dir" = "frontend" ]; then
              docker build -t europe-north1-docker.pkg.dev/${{ secrets.GCLOUD_PROJECT_ID }}/imagerepository/frontend ./frontend
              docker push europe-north1-docker.pkg.dev/${{ secrets.GCLOUD_PROJECT_ID }}/imagerepository/frontend
            fi
            if [ "$dir" = "api-gateway" ]; then
              docker build -t europe-north1-docker.pkg.dev/${{ secrets.GCLOUD_PROJECT_ID }}/imagerepository/api-gateway ./services/api-gateway
              docker push europe-north1-docker.pkg.dev/${{ secrets.GCLOUD_PROJECT_ID }}/imagerepository/api-gateway
            fi
            if [ "$dir" = "user-service" ]; then
              docker build -t europe-north1-docker.pkg.dev/${{ secrets.GCLOUD_PROJECT_ID }}/imagerepository/user-service ./services/user-service
              docker push europe-north1-docker.pkg.dev/${{ secrets.GCLOUD_PROJECT_ID }}/imagerepository/user-service
            fi
            if [ "$dir" = "listing-service" ]; then
              docker build -t europe-north1-docker.pkg.dev/${{ secrets.GCLOUD_PROJECT_ID }}/imagerepository/listing-service ./services/listing-service
              docker push europe-north1-docker.pkg.dev/${{ secrets.GCLOUD_PROJECT_ID }}/imagerepository/listing-service
            fi
            if [ "$dir" = "search-service" ]; then
              docker build -t europe-north1-docker.pkg.dev/${{ secrets.GCLOUD_PROJECT_ID }}/imagerepository/search-service ./services/search-service
              docker push europe-north1-docker.pkg.dev/${{ secrets.GCLOUD_PROJECT_ID }}/imagerepository/search-service
            fi
          done

  deploy:
    runs-on: ubuntu-latest
    needs: push-images

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCLOUD_AUTH_JSON }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.22.0

      - name: Configure kubectl for GKE
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --region ${{ secrets.GKE_CLUSTER_REGION }} \
            --project ${{ secrets.GCLOUD_PROJECT_ID }}

      - name: Deploy Updated Services to GKE
        run: |
          CHANGED_DIRS=$(git diff --name-only HEAD~1 HEAD | cut -d'/' -f2 | sort | uniq)
          for dir in $CHANGED_DIRS; do
            if [ "$dir" = "frontend" ] && [ -f k8s/frontend-deployment.yaml ]; then
              kubectl apply -f k8s/frontend-deployment.yaml
            fi
            if [ "$dir" = "api-gateway" ] && [ -f k8s/api-gateway-deployment.yaml ]; then
              kubectl apply -f k8s/api-gateway-deployment.yaml
            fi
            if [ "$dir" = "user-service" ] && [ -f k8s/user-service-deployment.yaml ]; then
              kubectl apply -f k8s/user-service-deployment.yaml
            fi
            if [ "$dir" = "listing-service" ] && [ -f k8s/listing-service-deployment.yaml ]; then
              kubectl apply -f k8s/listing-service-deployment.yaml
            fi
            if [ "$dir" = "search-service" ] && [ -f k8s/search-service-deployment.yaml ]; then
              kubectl apply -f k8s/search-service-deployment.yaml
            fi
          done
